import random

board = [' ' for _ in range(9)]

def print_board(board):
    print(f" {board[0]} | {board[1]} | {board[2]} ")
    print("---+---+---")
    print(f" {board[3]} | {board[4]} | {board[5]} ")
    print("---+---+---")
    print(f" {board[6]} | {board[7]} | {board[8]} ")

def check_winner(board, player):
    win_patterns = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  
        [0, 4, 8], [2, 4, 6]             
    ]
    for pattern in win_patterns:
        if all(board[i] == player for i in pattern):
            return True
    return False

def is_board_full(board):
    return ' ' not in board

def minimax(board, depth, is_maximizing, alpha, beta):
    if check_winner(board, 'O'):
        return 1  
    if check_winner(board, 'X'):
        return -1 
    if is_board_full(board):
        return 0  

    if is_maximizing:
        best = -float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                best = max(best, minimax(board, depth + 1, False, alpha, beta))
                board[i] = ' '
                alpha = max(alpha, best)
                if beta <= alpha:
                    break
        return best
    else:
        best = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                best = min(best, minimax(board, depth + 1, True, alpha, beta))
                board[i] = ' '
                beta = min(beta, best)
                if beta <= alpha:
                    break
        return best

def best_move(board):
    best_val = -float('inf')
    best_move = -1

    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            move_val = minimax(board, 0, False, -float('inf'), float('inf'))
            board[i] = ' '
            if move_val > best_val:
                best_move = i
                best_val = move_val
    return best_move

def play_game():
    print_board(board)
    while True:
        move = int(input("Masukkan langkah yang anda inginkan (1-9): ")) - 1
        if 0 <= move < 9 and board[move] == ' ':
            board[move] = 'X'
            print_board(board)
            if check_winner(board, 'X'):
                print("Pemain (X) menang!")
                break
            if is_board_full(board):
                print("Seri!")
                break
        else:
            print("Tempat tidak valid atau sudah terisi. Coba lagi.")
            continue

        print("Giliran Lawan (O):")
        ai_move = best_move(board)
        board[ai_move] = 'O'
        print_board(board)
        if check_winner(board, 'O'):
            print("Lawan (O) menang!")
            break
        if is_board_full(board):
            print("Seri!")
            break

play_game()
